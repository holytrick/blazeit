def nat:Type = t:Type -> (t->t) -> (t->t)
def 0:nat = fun t f x => x
def S:(nat -> nat) = fun n t f x => f (n t f x)
def nat_ind = P:(nat -> Type) -> (P 0) -> (n:nat -> (P nat) -> (P (S n))) -> n:nat -> (P n)
def add:(nat -> nat -> nat) = fun m n t f x => m t f (n t f x)
def mult:(nat->nat->nat) = fun m n t f x => m t (n t f) x
def 1:nat = S 0
def 2 = S (S 0)
def 3 = S (S (S 0))
def 4 = S (S (S (S 0)))
def 5 = S (S (S (S (S 0))))
def 10 = mult 5 2
def 100 = mult 10 10
def 1000 = mult 100 10
def even:(nat->Type) = fun m => P:(nat->Type) -> (P 0) -> (n:nat -> (P n) -> (P (S (S n)))) -> (P m)
def 2_even:(even 2) = fun P b i => (i 0 b)
def 4_even:(even 4) = fun P b i => (i 2 (i 0 b))
