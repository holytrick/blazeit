def nat:Type = (t:Type -> (t->t) -> t -> t)
def O:nat = (fun t:Type f:(t->t) x:t => x)
def S:(nat -> nat) = (fun n:nat t:Type f:(t->t) x:t => (f (((n t) f) x)))
def 1:nat = (S O)
def 2 = (S (S O))
def 3 = (S (S (S O)))
def int_t = (P:(nat -> Type) -> (P O) -> (n:nat -> (P nat) -> (P (S n))) -> n:nat -> (P n))
def sum:(nat -> nat -> nat) = (fun m n t f x => (((m t) f) (((n t) f) x)))
def 5:nat = ((sum 2) 3)
